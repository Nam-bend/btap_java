SDLC
1.Requirement 
2.Analysis
3.Design 
4.Implementation 
5.Testing 
6.Hand over - giai  đoạn bàn giao cho user 
7.Maintenance 
 
Software Development Life Cycle 
A.Outsource
1. Requirement - stakeholder(người quan tâm đến giá trị của sp, customer(outsource), những người góp vốn) 
- business analyst: người phân tích nghiệp vụ, viết doc cho dự án
 - project manager - technical team (optional): dự đoán dự án để chuẩn bị 
- quality assurance (QA) ~ tester: hiểu requirement để chuẩn bị testing strategy - designer (UI/UX) ==>output: requirement document
2.Analysis
 - BA 
 -PM (project manager) - system analyst/architect (SA): lường trước công nghệ sử dụng (design pattern, database, language, framework, microservice?,...)
- QA (optional) 
==> biểu đồ: usecase, class, sequence, activity,... (ngôn ngữ UML)
3.Design
 - UI/UX designer 
- SA/TL: thiết kế kiến trúc hệ thống, structure, tech stack, data flow, database, tương tác vs hệ thống khác 
- PM ==> high level design 4. Implementation (việc thực hiện)
- developer (frontend): người đưa sp đến vs người dùng, dùng analysis, UI/UX design 
- backend engineer (backend), dùng analysis, system design - devops ==> source code 
4.Testing 
- QA, tester: kiểm tra các tính năng dc code có đáp ứng requirement (requirement chức năng, phi chức năng (load chậm)) ko 
==>Output * manual test: file excel (kết quả từng testcase) * automation test: cypress, jmeter, robot * api test: postman collection, jmeter * kết quả
5.Hand over - stakeholder (customer) - training staff - PM: xem có bàn giao chuẩn ko
 - QA: test lần cuối trước khi bàn giao
 ==> document specialist: hướng dẫn người dùng, tài liệu hệ thống
6.Maintenance 
Giống 1 vòng bên trên: - requirement - analysis - design - implementation - testing - hand over B. Product Gồm tất cả những giai đoạn của outsource và có thêm: 6.1 publish 6.2 measure: thống kê số người tải, người mua,... 6.3 learn


WATERFULL 
Why? 
- Yêu cầu rõ ràng 
- Môi trường phát triển ổn định
 - Dễ hiểu, dễ triển khai,
 - Dễ dàng theo dõi tiến độ hoàn thành 
- Có tài liệu thiết kế sớm Requirement -> design->development->testing->deployment->Maintenance Waterfull là gì?
 • Requirements : - Làm rõ những gì chúng ta cần phải làm - Các yêu cầu chức năng - Các yêu cầu phi chức năng
 • Design - Tài liệu phân tích thiết kế - Các biểu đồ UML: uescases, class data flow - Giao diện người dùng: Figma,..high level design, high availability
 • Development - Viết các dòng code front end, back end: api, job,.. - Thuật toán 
• Testing - Unit test - Integration test - System test - acceptance test 
• Deployment - Chạy chương trình trên sever - Hệ thống có thể được truy cập qua internet 
• Maintenance - Sửa lỗi phát sinh sau khi deploy hệ thống mà người dùng phát hiện ra
- Thường sẽ xuất hiện trong thời gian ngắn sau khi deploy sản phẩm 
 Áp dụng: thực hiện lần lượt theo từng giai đoạn 
+ Ưu điểm:
 - Dễ hiểu, dễ quản lý
 + Nhược điểm: 
- Phát hiện lỗi muộn
 - Không linh hoạt
 - Khó khăn trong việc ước lượng thời gian và chi phí



Agile 
Triết lý Agile: làm tnao để nhanh chóng thích ứng, phản hồi với sự thay đổi 
4 tuyên ngôn 
cá nhân và sự tương tác > quy trình và công cụ 
phần mềm chạy tốt > tài liệu đầy đủ 
cộng tác vs khách hàng > đàm phán hợp đồng 
phản hồi vs sự thay đổi > bám vào kế hoạch 
12 nguyên tắc 
1. ưu tiên cao nhất là thoả mãn khách hàng thông qua việc chuyển giao sớm, liên tục 
các phần mềm có giá trị 
2. chào đón việc thay đổi yêu cầu 
3. các quy trình linh hoạt, tận dụng sự thay đổi trong các lợi thế cạnh tranh của khách 
hàng 
4. nhà kinh doanh và nhà phát triển làm việc cùng nhau hàng ngày trong mỗi dự án 
5. xây dựng các dự án xung quanh những cá nhân có động lực, cung cấp cho họ môi 
trường và sự hỗ trợ cần thiết và tin tưởng họ để hoàn thành công việc 
6. hội thoại trực tiếp là phương pháp tốt nhất để truyền đạt thông tin nội bộ 
7. phần mềm chạy tốt là thước đo của tiến độ 
8. các quy trình linh hoạt thúc đẩy phát triển bền vững 
9. liên tục quan tâm đến các kĩ thuật, thiết kế tốt để gia tăng sự linh hoạt 
10. sự đơn giản, nghệ thuật tối đa hoá việc chưa xong là căn bản 
11. các kiến trúc tốt, yêu cầu tốt nhất, thiết kế tốt nhất được làm ra bởi các nhóm tự tổ 
chức 
12. nhóm phát triển sẽ thường xuyên nghĩ làm sao để trở nên hiệu quả hơn, họ điều 
chỉnh, thay đổi các hành vi của mình cho phù hợpAgile 
2 
chiếc ô agile
phương pháp: 
scrum: 4 meeting 
planning 
stand up 
review 
retrospective 
extreme programming 
kanban 
scrum banAgile 
3
